---
title: "MIMOSA Simulations"
format: 
  html: default
editor: visual
---

```{r,message=FALSE,warning=FALSE}

#loading MIMOSAy
#install.packages("devtools") #install devtools package
library(devtools) #load it
#install_github("RGLab/MIMOSA",ref="trunk") 
library(devtools) 
library(ggplot2)
library(MIMOSA) 
library(dplyr)
library(tidyr)
install.packages("pROC", repos = "https://cloud.r-project.org/")
library(pROC)

```

Parameters

Unstimulated cells will react the same whether they are responders or not so mean is the same. Stimulated reactions differ when it is a responder vs. a non-responder.

```{r}
set.seed(2025)
source("R/calculate_params.R")
source("R/simulate_data.R")
source("R/prepare_for_mimosa.R")
source("R/fit_MIMOSA.R")
source("R/average_ROC_results.R")
source("R/ROC_curve.R")
source("R/fishers_curve.R")
source("R/LRT_curve.R")
source("R/simulate_all.R")

```

```{r}
<<<<<<< HEAD
# Parameter lists
# n_samples_list <- c( 200)        # Number of participants
# N_list        <- c(10e3, 25e3, 50e3)     # Number of cells per sample
# w_list       <- c(0.2, 0.5, 0.7)       # Probability of responder
# f_list       <- c(1, 1.5, 2)           # Inflation factor
# c_list       <- c(1, 2, 3)             # Concentration
# mu_u_NR <- c(0.05, 0.10)          # Means for non-responders (unstimulated)
# mu_u_R  <- c(0.10, 0.25, 0.30)    # Means for responders (unstimulated)
# n_runs_list    <- 10                    # Number of simulation runs

n_samples_list <- c( 50,100,200)        # Number of participants
N_list        <- c(50e3)     # Number of cells per sample
w_list       <- c(0.5)       # Probability of responder
f_list       <- c(5)           # Inflation factor
c_R_list  <- c(400)# Concentration
c_NR_list<-c(26345)
mu_u_NR <- c(0.00004)          # Means for non-responders (unstimulated)
mu_u_R  <- c(0.00207)    # Means for responders (unstimulated), let it be the same
n_runs   <- 3                 # Number of simulation runs
=======
n_samples_list <- c( 200)        # Number of participants
N_list        <- c(10e3)     # Number of cells per sample
w_list       <- c(0.5)       # Probability of responder
f_list       <- c(5)           # Inflation factor

c_stim_list       <- c(398)      # Concentration
c_unstim_list       <- c(26345)      # Concentration

mu_u_NR <- c(3e-05)          # Means for non-responders (unstimulated)
mu_u_R  <- c(3e-05)          # Means for responders (unstimulated)

n_runs   <- 5                  # Number of simulation runs
>>>>>>> refs/remotes/origin/main
```

```{r}
# Run analysis
for (n_samples in n_samples_list){
        for (N in N_list) {
            for (w in w_list) {
                for (f in f_list) {
                    for (c_u in c_unstim_list) {
                        for (c_s in c_stim_list) {
                        print("=== Running Simulation with Parameters ===")
                        print(paste("Parameters: n_samples =", n_samples, ", N =", N, ", w =", w, ", f =", f, ", c_u =", c_u, ", c_s =", c_s))
                        # Store results from multiple runs
                        # Store results from multiple runs
                        all_roc_mimosa <- list()
                        all_roc_fisher <- list()
                        
                        # Run multiple simulations
                        for(run in 1:n_runs) {
                            
                            # Get simulation data
                            params <- calculated_params(mu_u_NR, mu_u_R, f, c_u, c_s)
                            dat <- simulate_data(n_samples, w, params, N, run)
                            # Fit MIMOSA model
                            E <- prepare_for_mimosa(dat$data)
                            if (is.null(E)) {
                                print("E is NULL â€“ skipping this combination")
                                next
                            }
                            print("fitting MIMOSA model")
                            #browser()
                            fit <- fit_MIMOSA(E)
                             # Calculate ROC results
                             roc_result <- ROC_curve(fit, dat)
                             roc_fisher <- fishers_curve(dat)

                            all_roc_mimosa[[run]] <- roc_result
                            all_roc_fisher[[run]] <- roc_fisher
                        }
                        # Average the curves
                        avg_roc_mimosa <- average_roc_curves(all_roc_mimosa)
                        avg_roc_fisher <- average_roc_curves(all_roc_fisher)
<<<<<<< HEAD
                        p <- plot_curves(avg_mimosa,avg_fisher,n_samples,
                                         auc_mimosa = avg_mimosa$auc,auc_fisher = avg_fisher$auc
                         )
                        filename<-                                sprintf("plots/ROC_avg_ns%d_N%.0f_w%.2f_f%.0f_cR%.0f_cNR%.0f_runs%d.png",
                    n_samples, N, w, f, c_R, c_NR, n_runs)
=======
                        # Plot averaged curves
                        # Plot averaged curves
                        p <- plot_curves(MIMOSA = avg_roc_mimosa, 
                            Fisher = avg_roc_fisher, n_samples = n_samples)

                        filename <- sprintf("plots/ROC_avg_ns%d_N%.0f_w%.2f_f%.0f_cu%.0f_cs%.0f_runs%d.png",
                                n_samples, N, w, f, c_u, c_s, n_runs)

>>>>>>> refs/remotes/origin/main
                        ggsave(filename, plot = p, width = 8, height = 6, dpi = 300)
                     }
                 }
             }
         }
   }
 }
```

Plots the change in cell counts for the responders and non responders. This plot can be used to assessed if realistic data has been generated.code below.

```{r}

plot_responder_comparison <- function(sim_result) {
  # Get data and responder status
  data <- sim_result$data
  responder_status <- sim_result$responder_status
  # Add responder label to data
   # Match responder_status to each SUBJECTID
  resp_map <- setNames(responder_status, unique(data$SUBJECTID))
  data$RESPONDER <- resp_map[data$SUBJECTID]
  data$RESPONDER <- ifelse(data$RESPONDER == 1, "Responder", "Non-Responder")
  data$STIMULATION <- factor(data$STIMULATION,
                            levels = c("Unstimulated", "Stimulated") )
 # Plot trend in cell counts 
 p1 <- ggplot(data, aes(x = STIMULATION, y = CYTNUM, color = RESPONDER)) +
   geom_line(aes(group = SUBJECTID), alpha = 0.6, linewidth = 0.5) +
    geom_point(size = 2, alpha = 0.8) +
    facet_wrap(~RESPONDER) +
    labs(
      title = "Cell Count Distribution by Responder Status",
      x = "Condition",
      y = "Number of Functional Cells",
      color = "Responder Status"
    ) +
    theme_bw() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
    return(p1)
}

for (n_samples_val in n_samples_list) {
    for (N_val in N_list) {
        for (w_val in w_list) {
            for (f_val in f_list) {
<<<<<<< HEAD
                for (c_R_val in c_R_list) {
                     for (c_NR_val in c_NR_list) {
                          for(run in 1:n_runs) {
                    print(paste("Generating plot for:", "Run =", run
, ",n_samples =", n_samples_val, 
                               ", N =", N_val, ", w =", w_val, ", f =", f_val, ", c_R =", c_R_val, ", c_NR =", c_NR_val))                   
=======
                for (c_u in c_unstim_list) {
                        for (c_s in c_stim_list) {
                    print(paste("Generating plot for: n_samples =", n_samples_val, 
                               ", N =", N_val, ", w =", w_val, ", f =", f_val, ", c_u =", c_u, ", c_s =", c_s))                   
>>>>>>> refs/remotes/origin/main
                    # Generate data
                    params <- calculated_params(mu_u_NR, mu_u_R, f_val, c_u,c_s)
                    dat <- simulate_data(n_samples_val, w_val, params, N_val, run)
                    # Plot the cell count distribution by responder status
                    plot <- plot_responder_comparison(dat)
                    # Save plot
                    filename <- sprintf(
                "plots/cell_counts%d_N%.0f_w%.2f_f%.0f_cR%.0f_cNR%.0f_run%d.png",
                n_samples_val, N_val, w_val, f_val, c_R_val, c_NR_val, run
              )
                    ggsave(filename, plot = plot, width = 12, height = 6, dpi = 300)
                             }
                    
                  }           
                }
            }
        }
    }
}

```

#Plot the empirical density for simulated data

```{r}
# mode: (alpha - 1) / (alpha + beta - 2)
# their mode:
# 4.5 / 85 * 4e-4 = 2.12e-5
# Parameters
mode_u <- 2.12e-5
con <- 2.3e4
alpha_unstim <- 1 + mode_u * (con - 2)
beta_unstim <- con - alpha_unstim
mean_uns <- alpha_unstim / con


#mu_u_R  <- 0.0000529
#con     <- 18997
#alpha_unstim <- con * mu_u_R
#beta_unstim  <- con * (1 - mu_u_R) 

# Simulate Beta data
set.seed(2025)
df <- data.frame(empirical = rbeta(200, alpha_unstim, beta_unstim))

y_height <- 1.5e4
# Plot
library(ggplot2)
plot <- ggplot(df, aes(x = empirical)) +
  geom_histogram(aes(y = after_stat(density)),
                 binwidth = 2.3e-05, fill = "lightgrey", color = "black") +
  stat_function(fun = dbeta,
                args = list(shape1 = alpha_unstim, shape2 = beta_unstim),
                color = "blue", linetype = "dotdash", linewidth = 1.2) +
  labs(x = expression(paste("Empirical ", hat(p)[u])),
       y = "Density") +
  theme_bw() +
  coord_cartesian(xlim = c(0, 6e-04), ylim = c(0, 15000)) +
  scale_x_continuous(breaks = seq(0, 6e-04, by = 2e-04)) +
  scale_y_continuous(breaks = seq(0, 15000, by = 3000))

filename <- sprintf("plots/empirical_density.png")
ggsave(filename, plot = plot, width = 24, height = 12, dpi = 300)
```

```{r}
n_samples_list <- c(200)   # Number of participants
N_list        <- c(10e3)    # Number of cells per sample
w_list       <- c(0.5)      # Probability of responder
f_list       <- c(4)         # Inflation factor
c_stim_list       <- c(85000)     # Concentration
c_unstim_list       <- c(23000)      # Concentration
mu_u_NR <- c(6.467642e-05) 
mu_u_R <- c(6.467642e-05)         # Means for responders

n_runs   <- 10             # Number of simulation runs


n_samples <- n_samples_list[1]
N         <- N_list[1]
w         <- w_list[1]
f         <- f_list[1]
c_u       <- c_unstim_list[1]
c_s       <- c_stim_list[1]
run <- 1
print("=== Running Simulation with Parameters ===")
print(paste("Parameters: n_samples =", n_samples, ", N =", N,
            ", w =", w, ", f =", f, ", c_u =", c_u, ", c_s =", c_s))

```

```{i}
{r}
library(ggplot2)
library(pROC)
library(MIMOSA)
set.seed(2025)
# Simulation Parameters
n_cells <- 10000   # total number of cells
n_trials <- 200           # trials per cell
#n_samples <- n_samples_list[1]
#N         <- N_list[1]
#w         <- w_list[1]
#f         <- f_list[1]
#c_u       <- c_unstim_list[1]
#c_s       <- c_stim_list[1]
#run <- 1
#print("=== Running Simulation with Parameters ===")/noise
spike_magnitudes <- seq(0.01, 0.1, by = 0.05)  # magnitude of spike (mean of spike)
min_baseline <- 0.01  # original lower bound for baseline probabilitieslls * prop)
  }
}
# Line Plots, AUC vs Proportion of Spikes
plot_AUC_spikes<-ggplot(results_auc, aes(x = spike_prop, y = AUC, color = factor(mag))) +
  geom_line(size = 1) +
  labs(title = "AUC vs Proportion of Spikes",
       x = "Proportion of Spikes",
       y = "AUC",
       color = "Spike Magnitude") +
  theme_minimal()
filename <- sprintf("plots/plot_AUC_spikes.png")
ggsave(filename, plot = plot_AUC_spikes, width = 24, height = 12, dpi = 300)
# Pseudo-trials ratio vs Proportion of Spikes
plot_pro_spikes<-ggplot(results_pseudo, aes(x = spike_prop, y = PseudoRatio, color = factor(mag))) +
  geom_line(size = 1) +
  labs(title = "Pseudo-trials ratio vs Proportion of Spikes",
       x = "Proportion of Spikes",
       y = "(Î± + Î² - 2)/n (pseudo trials)",
       color = "Spike Magnitude") +
  theme_minimal()
filename <- sprintf("plots/plot_pro_spikes.png")
ggsave(filename, plot = plot_pro_spikes, width = 24, height = 12, dpi = 300)
```

```{r}
library(ggplot2)
library(pROC)
library(MIMOSA)
set.seed(2025)
n_cells <- 10000 
n_trials <- 200  
spike_props <- seq(0.01, 0.1, by = 0.03)       # proportion of spikes
spike_magnitudes <- c(0.01,0.05)  # magnitude of spike (mean of spike)
min_baseline <- 0.01  # original lower bound for baseline probs
max_baseline <- 0.05  # original upper bound
# storage
results_auc <- data.frame()
results_pseudo <- data.frame()
# Simulation Loop
for (mag in spike_magnitudes) {
  for (prop in spike_props) {
    n_spike <- round(n_cells * prop)
    n_normal <- n_cells - n_spike
    p_normal <- runif(n_normal, min_baseline, max_baseline)
    # Spike cells (mean of spike magnitude)
    p_spike <- runif(n_spike, mag, mag + 0.05)
    p_spike[p_spike > 1] <- 1  # ensure prob is less than 1
     # Combine 
    p_all <- c(p_normal, p_spike)
    labels <- c(rep(0, n_normal), rep(1, n_spike))  # 0 = baseline, 1 = spike
    # Binomial counts
    X <- rbinom(n_cells, size = n_trials, prob = p_all)
    # AUC calculation
    if(length(unique(labels)) > 1) {
      roc_obj <- roc(response = factor(labels, levels = c(0,1)),
                  predictor = X, direction = "<")
      auc_val <- as.numeric(roc_obj$auc)
    } else auc_val <- NA
    # Prepare data and simulate
    params <- calculate_params(mu_u_NR, mu_u_R, f, c_u, c_s)
      dat <- simulate_data(n_samples, w, params, N, run)
    # Fit MIMOSA model
    E <- prepare_for_mimosa(dat$data)
    print("fitting MIMOSA model")
    fit <- fit_MIMOSA(E)
    # Extract alpha/beta for stimulated sample (row 2)
    mimosa_obj <- fit$IL2
     res <- mimosa_obj@result
    param_values <- res@params
    alpha_stim <- param_values[2, "alphas.1"]
    beta_stim  <- param_values[2, "alphas.0"]
    # Pseudo-trials ratio from fitted MIMOSA
    pseudo_ratio <- (alpha_stim + beta_stim - 2) / N
      print(c(alpha_stim, beta_stim, pseudo_ratio))

    # Store results
    results_auc <- rbind(results_auc,
                         data.frame(spike_prop = prop, AUC = auc_val, mag = mag))
    results_pseudo <- rbind(results_pseudo,
                            data.frame(spike_prop = prop, PseudoRatio = pseudo_ratio, mag = mag))
  }
}
# Line Plots, AUC vs Proportion of Spikes
plot_AUC_spikes<-ggplot(results_auc, aes(x = spike_prop, y = AUC, color = factor(mag))) +
  geom_line(size = 1.2) +
  labs(title = "AUC vs Proportion of Spikes",
       x = "Proportion of Spikes",
       y = "AUC",
       color = "Spike Magnitude") +
theme_classic(base_size = 14)
filename1 <- sprintf("plots/plot_AUC_spikes.png")
ggsave(filename1, plot = plot_AUC_spikes, width = 24, height = 12, dpi = 300)
# Pseudo-trials ratio vs Proportion of Spikes
plot_pro_spikes<-ggplot(results_pseudo, aes(x = spike_prop, y = PseudoRatio, color = factor(mag))) +
  geom_line(size = 1.2) +
labs(title = "Pseudo-trials ratio vs Proportion of Spikes",
       x = "Proportion of Spikes",
       y = "(Î± + Î² - 2)/n (pseudo trials)",
       color = "Spike Magnitude") +
  theme_classic(base_size = 14)
filename0<- sprintf("plots/plot_pro_spikes.png")
ggsave(filename0, plot = plot_pro_spikes, width = 24, height = 12, dpi = 300)
 
filename0<- sprintf("plots/plot_pro_spikes.png")
ggsave(filename0, plot = plot_pro_spikes, width = 24, height = 12, dpi = 300)
```

<<<<<<< HEAD
```{r}
filename0<- sprintf("plots/plot_pro_spikes.png")
ggsave(filename0, plot = plot_pro_spikes, width = 24, height = 12, dpi = 300)
```
=======


'''{r}

#Plot we are interested in plotting proportion of spikes vs Magnitude of spikes 

'''

>>>>>>> origin/main
