---
title: "MIMOSA Simulations"
format: 
  html: default
editor: visual
---

```{r,message=FALSE,warning=FALSE}
#loading MIMOSA
#install.packages("devtools") #install devtools package
library(devtools) #load it
#install_github("RGLab/MIMOSA",ref="trunk") 
library(devtools) 
library(ggplot2)
library(MIMOSA) 
library(dplyr)
library(tidyr)
#install.packages("pROC", repos = "https://cloud.r-project.org/")
library(pROC)

```

Parameters

stimulated will react the same whether it is responder or not.Unstimulated reacts different when it is a reponder vs a non-responder.

```{r}
set.seed(2025)
source("R/calculated_params.R")
source("R/get_sim_data.R")
source("R/prepare_for_mimosa.R")
source("R/fit_MIMOSA.R")
source("R/average_ROC_results.R")
source("R/ROC_curve.R")
source("R/fishers_curve.R")
source("R/simulate_all.R")


# Simulation parameters in a list
n_samples_list <- c(10,50)   # Number of participants
N_list <- c(1e3,10e3)         # Number of cells measured per sample
w_list <- c(0.25,0.5)         # Probability of being a responder
f_list<-c(1,2)                # inflation factor
c_list <- c(1,2)              # Concentration (same for all)
# Concentration and means
mu_u_NR<-0.05
mu_u_R <- 0.01           # Unstim mean for responders 

# Run full simulation with progress messages
combined_sim_data <- simulate_all(
  n_samples_list, N_list, w_list, f_list, c_list,
  mu_u_NR, mu_u_R,
  n_runs = 10
)

# Inspect the combined data
head(combined_sim_data)






































#testing 
mu_u_NR <- 0.05
mu_u_R  <- 0.01
f <- 1
c <- 1

params <- calculated_params(mu_u_NR, mu_u_R, f, c)
print(params)
stopifnot(is.list(params),
          all(c("a_s","b_s","a_u_R","b_u_R","a_u_NR","b_u_NR") %in% names(params)),
          all(unlist(params) > 0))
cat("✓ calculated_params OK\n")

n_samples <- 10
N <- 1000
w <- 0.25

#dir.create("plots", showWarnings = FALSE)

# Assume sim_result is the output from get_sim_data
sim_result <- get_sim_data(n_samples = 10, w = 0.25, params = calculated_params(mu_u_NR, mu_u_R, f = 1, c = 1), N = 1000)

# Generate the plot
p <- plot_responder_comparison(sim_result)
# 2) Save to file so you can inspect it
plot_file <- "plots/test_responder_comparison.png"
ggsave(plot_file, plot = p, width = 8, height = 6, dpi = 300)

message("Plot saved to: ", plot_file)
E <- prepare_for_mimosa(sim_result$data)
E
stopifnot(inherits(E, "ExpressionSet"))
# Peek at phenotype/feature data
head(Biobase::pData(E))
Biobase::fvarMetadata(E)
cat("✓ prepare_for_mimosa OK\n")

fit2<-fit_MIMOSA(E)
fit <- try(fit_MIMOSA(E), silent = TRUE)
if (inherits(fit, "try-error")) {
  stop("fit_MIMOSA threw an error: ", attr(fit, "condition")$message)
}
# Basic sanity checks
print(class(fit))
print(lapply(fit, class))
ok <- (!is.null(fit)) && (!is.atomic(fit[[1]])) && inherits(fit[[1]], "BayesMIMOSA")
if (!ok) stop("fit[[1]] is not a BayesMIMOSA object")
# Inspect tables
ct <- countsTable(fit[[1]])
head(ct)
cat("✓ fit_MIMOSA OK\n")

roc_m <- ROC_curve(fit, n_samples, sim_result)
roc_f <- lrt_curve(sim_result)

head(roc_m); head(roc_f)
stopifnot(all(c("FPR","TPR") %in% names(roc_m)),
          all(c("FPR","TPR") %in% names(roc_f)))

# Make a tiny averaged example (averaging the same curve twice)
avg_m <- average_ROC_curves(list(roc_m, roc_m))
avg_f <- average_ROC_curves(list(roc_f, roc_f))
stopifnot(all(c("FPR","TPR") %in% names(avg_m)),
          all(c("FPR","TPR") %in% names(avg_f)))
cat("✓ ROC helpers OK\n")

# Quick on-screen plot (no file writing)
ggplot() +
  #geom_line(data = avg_m, aes(FPR, TPR), linewidth = 1) +
  geom_line(data = avg_f, aes(FPR, TPR), linetype = 2, linewidth = 1) +
  theme_bw() + labs(title = "Averaged ROC (smoke test)", color = NULL)
library(ggplot2)

# Create the plot
p <- ggplot() +
  geom_line(data = avg_m, aes(FPR, TPR), linewidth = 1) +
  geom_line(data = avg_f, aes(FPR, TPR), linetype = 2, linewidth = 1) +
  theme_bw() +
  labs(title = "Averaged ROC (smoke test)", color = NULL)

# Save to file
ggsave("ROC_smoke_test.png", plot = p, width = 8, height = 6, dpi = 300)

# Optionally also print to screen
print(p)




#sim_data <- read.csv("combined_sim_data.csv")
#plot_simulated_counts(sim_data, n_samples = NA, N = NA, w = NA, f = NA, c = NA)




#testing 
Set parameter values
n_samples <- c(50)          # Number of participants
N <- c(10e3)                # Number of cells measured per sample
w <- c(0.25)                # Probability of being a responder
f<-c(1)                     # Inflation factor
c <- c(10)                  # Concentration
mu_u_NR<-0.05               # Mean for unstimulated non-responders 
mu_u_R <- 0.01              # Mean for unstimulated responders

# # Generate data
# params <- calculate_params(mu_u_NR, mu_u_R, f, c)
# data <- simulate_data(n_samples, w, params, N)

# # Plot the cell count distribution by responder status
# plots <- plot_responder_comparison(data)

for (n_samples_val in n_samples) {
    for (N_val in N) {
        for (w_val in w) {
            for (f_val in f) {
                for (c_val in c) {
                    
                    print(paste("Generating plot for: n_samples =", n_samples_val, 
                               ", N =", N_val, ", w =", w_val, ", f =", f_val, ", c =", c_val))
                    
                    # Generate data
                    params <- calculate_params(mu_u_NR, mu_u_R, f_val, c_val)
                    data <- simulate_data(n_samples_val, w_val, params, N_val)
                    
                    # Plot the cell count distribution by responder status
                    plot <- plot_responder_comparison(data)
                    
                    # Save plot
                    filename <- sprintf("plots/cell_counts%d_N%.0f_w%.2f_f%.0f_c%.0f.png", 
                                           n_samples_val, N_val, w_val, f_val, c_val)
                    
                    ggsave(filename, plot = plot, width = 12, height = 6, dpi = 300)
                    
            
                }
            }
        }
    }
}


```