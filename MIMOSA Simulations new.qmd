---
title: "MIMOSA Simulations"
format: 
  html: default
editor: visual
---

```{r,message=FALSE,warning=FALSE}
#loading MIMOSA
#install.packages("devtools") #install devtools package
library(devtools) #load it
#install_github("RGLab/MIMOSA",ref="trunk") 
library(devtools) 
library(ggplot2)
library(MIMOSA) 
library(dplyr)
library(tidyr)
install.packages("pROC", repos = "https://cloud.r-project.org/")
library(pROC)

```

Parameters

stimulated will react the same whether it is responder or not.Unstimulated reacts different when it is a reponder vs a non-responder.

```{r}
set.seed(2025)
source("R/calculated_params.R")
source("R/get_sim_data.R")
source("R/prepare_for_mimosa.R")
source("R/fit_MIMOSA.R")
source("R/average_ROC_results.R")
source("R/ROC_curve.R")
source("R/fishers_curve.R")
source("R/LRT_curve.R")
source("R/simulate_all.R")

```

```{r}
# Parameter lists
# n_samples_list <- c( 200)        # Number of participants
# N_list        <- c(10e3, 25e3, 50e3)     # Number of cells per sample
# w_list       <- c(0.2, 0.5, 0.7)       # Probability of responder
# f_list       <- c(1, 1.5, 2)           # Inflation factor
# c_list       <- c(1, 2, 3)             # Concentration
# mu_u_NR <- c(0.05, 0.10)          # Means for non-responders (unstimulated)
# mu_u_R  <- c(0.10, 0.25, 0.30)    # Means for responders (unstimulated)
# n_runs_list    <- 10                    # Number of simulation runs

n_samples_list <- c( 200)        # Number of participants
N_list        <- c(10e3)     # Number of cells per sample
w_list       <- c(0.5)       # Probability of responder
f_list       <- c(5)           # Inflation factor

c_stim_list       <- c(398)      # Concentration
c_unstim_list       <- c(26345)      # Concentration

mu_u_NR <- c(3e-05)          # Means for non-responders (unstimulated)
mu_u_R  <- c(3e-05)          # Means for responders (unstimulated)

n_runs   <- 5                  # Number of simulation runs
```

```{r}
# Run analysis
for (n_samples in n_samples_list){
        for (N in N_list) {
            for (w in w_list) {
                for (f in f_list) {
                    for (c_u in c_unstim_list) {
                        for (c_s in c_stim_list) {
                        print("=== Running Simulation with Parameters ===")
                        print(paste("Parameters: n_samples =", n_samples, ", N =", N, ", w =", w, ", f =", f, ", c_u =", c_u, ", c_s =", c_s))
                        # Store results from multiple runs
                        # Store results from multiple runs
                        all_roc_mimosa <- list()
                        all_roc_fisher <- list()
                        
                        # Run multiple simulations
                        for(run in 1:n_runs) {
                            
                            # Get simulation data
                            params <- calculated_params(mu_u_NR, mu_u_R, f, c_u, c_s)
                            dat <- get_sim_data(n_samples, w, params, N, run)
                            # Fit MIMOSA model
                            E <- prepare_for_mimosa(dat$data)
                            if (is.null(E)) {
                                print("E is NULL â€“ skipping this combination")
                                next
                            }
                            print("fitting MIMOSA model")
                            #browser()
                            fit <- fit_MIMOSA(E)
                             # Calculate ROC results
                             roc_result <- ROC_curve(fit, dat)
                             roc_fisher <- fishers_curve(dat)

                            all_roc_mimosa[[run]] <- roc_result
                            all_roc_fisher[[run]] <- roc_fisher
                        }
                        # Average the curves
                        avg_roc_mimosa <- average_roc_curves(all_roc_mimosa)
                        avg_roc_fisher <- average_roc_curves(all_roc_fisher)
                        # Plot averaged curves
                        # Plot averaged curves
                        p <- plot_curves(MIMOSA = avg_roc_mimosa, 
                            Fisher = avg_roc_fisher, n_samples = n_samples)

                        filename <- sprintf("plots/ROC_avg_ns%d_N%.0f_w%.2f_f%.0f_cu%.0f_cs%.0f_runs%d.png",
                                n_samples, N, w, f, c_u, c_s, n_runs)

                        ggsave(filename, plot = p, width = 8, height = 6, dpi = 300)
                     }
                 }
             }
         }
   }
 }
```

```{r}

plot_responder_comparison <- function(sim_result) {
  # Get data and responder status
  data <- sim_result$data
  responder_status <- sim_result$responder_status
  # Add responder label to data
   # Match responder_status to each SUBJECTID
  resp_map <- setNames(responder_status, unique(data$SUBJECTID))
  data$RESPONDER <- resp_map[data$SUBJECTID]
  data$RESPONDER <- ifelse(data$RESPONDER == 1, "Responder", "Non-Responder")
  data$STIMULATION <- factor(data$STIMULATION,
                            levels = c("Unstimulated", "Stimulated") )
 # Plot trend in cell counts 
 p1 <- ggplot(data, aes(x = STIMULATION, y = CYTNUM, color = RESPONDER)) +
   geom_line(aes(group = SUBJECTID), alpha = 0.6, linewidth = 0.5) +
    geom_point(size = 2, alpha = 0.8) +
    facet_wrap(~RESPONDER) +
    labs(
      title = "Cell Count Distribution by Responder Status",
      x = "Condition",
      y = "Number of Functional Cells",
      color = "Responder Status"
    ) +
    theme_bw() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
    return(p1)
}


for (n_samples_val in n_samples_list) {
    for (N_val in N_list) {
        for (w_val in w_list) {
            for (f_val in f_list) {
                for (c_R_val in c_R_list) {
                     for (c_NR_val in c_NR_list) {
                    print(paste("Generating plot for: n_samples =", n_samples_val, 
                               ", N =", N_val, ", w =", w_val, ", f =", f_val, ", c_R =", c_R_val, ", c_NR =", c_NR_val))                   
                    # Generate data
                    params <- calculated_params(mu_u_NR, mu_u_R, f_val, c_R_val,c_NR_val)
                    dat <- get_sim_data(n_samples_val, w_val, params, N_val)
                    # Plot the cell count distribution by responder status
                    plot <- plot_responder_comparison(dat)
                    # Save plot
                    filename <- sprintf("plots/cell_counts%d_N%.0f_w%.2f_f%.0f_cR%.0f_cNR%.0f.png", 
                     n_samples_val, N_val, w_val, f_val, c_R_val, c_NR_val)
                    ggsave(filename, plot = plot, width = 12, height = 6, dpi = 300)
                    
                  }           
                }
            }
        }
    }
}

```

